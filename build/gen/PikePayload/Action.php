<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pike_payload.proto

namespace PikePayload;

use UnexpectedValueException;

/**
 * Protobuf type <code>PikePayload.Action</code>
 */
class Action
{
    /**
     * Generated from protobuf enum <code>ACTION_UNSET = 0;</code>
     */
    const ACTION_UNSET = 0;
    /**
     * Generated from protobuf enum <code>CREATE_AGENT = 1;</code>
     */
    const CREATE_AGENT = 1;
    /**
     * Generated from protobuf enum <code>UPDATE_AGENT = 2;</code>
     */
    const UPDATE_AGENT = 2;
    /**
     * Generated from protobuf enum <code>CREATE_ORGANIZATION = 3;</code>
     */
    const CREATE_ORGANIZATION = 3;
    /**
     * Generated from protobuf enum <code>UPDATE_ORGANIZATION = 4;</code>
     */
    const UPDATE_ORGANIZATION = 4;

    private static $valueToName = [
        self::ACTION_UNSET => 'ACTION_UNSET',
        self::CREATE_AGENT => 'CREATE_AGENT',
        self::UPDATE_AGENT => 'UPDATE_AGENT',
        self::CREATE_ORGANIZATION => 'CREATE_ORGANIZATION',
        self::UPDATE_ORGANIZATION => 'UPDATE_ORGANIZATION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Action::class, \PikePayload_Action::class);

