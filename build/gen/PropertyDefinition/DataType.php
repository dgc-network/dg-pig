<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: schema_state.proto

namespace PropertyDefinition;

use UnexpectedValueException;

/**
 * Protobuf type <code>PropertyDefinition.DataType</code>
 */
class DataType
{
    /**
     * Generated from protobuf enum <code>UNSET_DATA_TYPE = 0;</code>
     */
    const UNSET_DATA_TYPE = 0;
    /**
     * Generated from protobuf enum <code>BYTES = 1;</code>
     */
    const BYTES = 1;
    /**
     * Generated from protobuf enum <code>BOOLEAN = 2;</code>
     */
    const BOOLEAN = 2;
    /**
     * Generated from protobuf enum <code>NUMBER = 3;</code>
     */
    const NUMBER = 3;
    /**
     * Generated from protobuf enum <code>STRING = 4;</code>
     */
    const STRING = 4;
    /**
     * Generated from protobuf enum <code>ENUM = 5;</code>
     */
    const ENUM = 5;
    /**
     * Generated from protobuf enum <code>STRUCT = 6;</code>
     */
    const STRUCT = 6;
    /**
     * Generated from protobuf enum <code>LAT_LONG = 7;</code>
     */
    const LAT_LONG = 7;

    private static $valueToName = [
        self::UNSET_DATA_TYPE => 'UNSET_DATA_TYPE',
        self::BYTES => 'BYTES',
        self::BOOLEAN => 'BOOLEAN',
        self::NUMBER => 'NUMBER',
        self::STRING => 'STRING',
        self::ENUM => 'ENUM',
        self::STRUCT => 'STRUCT',
        self::LAT_LONG => 'LAT_LONG',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DataType::class, \PropertyDefinition_DataType::class);

