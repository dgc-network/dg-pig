<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: schema_payload.proto

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * SchemaPayload contains an action enum and the associated action payload.
 *
 * Generated from protobuf message <code>SchemaPayload</code>
 */
class SchemaPayload extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.SchemaPayload.Action action = 1;</code>
     */
    protected $action = 0;
    /**
     * The smart contract will read from just one of these fields
     * according to the Action. Only one of these should be set and must match
     * the corresponding Action.
     *
     * Generated from protobuf field <code>.SchemaCreateAction schema_create = 2;</code>
     */
    protected $schema_create = null;
    /**
     * Generated from protobuf field <code>.SchemaUpdateAction schema_update = 3;</code>
     */
    protected $schema_update = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $action
     *     @type \SchemaCreateAction $schema_create
     *           The smart contract will read from just one of these fields
     *           according to the Action. Only one of these should be set and must match
     *           the corresponding Action.
     *     @type \SchemaUpdateAction $schema_update
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\SchemaPayload::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.SchemaPayload.Action action = 1;</code>
     * @return int
     */
    public function getAction()
    {
        return $this->action;
    }

    /**
     * Generated from protobuf field <code>.SchemaPayload.Action action = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setAction($var)
    {
        GPBUtil::checkEnum($var, \SchemaPayload\Action::class);
        $this->action = $var;

        return $this;
    }

    /**
     * The smart contract will read from just one of these fields
     * according to the Action. Only one of these should be set and must match
     * the corresponding Action.
     *
     * Generated from protobuf field <code>.SchemaCreateAction schema_create = 2;</code>
     * @return \SchemaCreateAction|null
     */
    public function getSchemaCreate()
    {
        return $this->schema_create;
    }

    public function hasSchemaCreate()
    {
        return isset($this->schema_create);
    }

    public function clearSchemaCreate()
    {
        unset($this->schema_create);
    }

    /**
     * The smart contract will read from just one of these fields
     * according to the Action. Only one of these should be set and must match
     * the corresponding Action.
     *
     * Generated from protobuf field <code>.SchemaCreateAction schema_create = 2;</code>
     * @param \SchemaCreateAction $var
     * @return $this
     */
    public function setSchemaCreate($var)
    {
        GPBUtil::checkMessage($var, \SchemaCreateAction::class);
        $this->schema_create = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.SchemaUpdateAction schema_update = 3;</code>
     * @return \SchemaUpdateAction|null
     */
    public function getSchemaUpdate()
    {
        return $this->schema_update;
    }

    public function hasSchemaUpdate()
    {
        return isset($this->schema_update);
    }

    public function clearSchemaUpdate()
    {
        unset($this->schema_update);
    }

    /**
     * Generated from protobuf field <code>.SchemaUpdateAction schema_update = 3;</code>
     * @param \SchemaUpdateAction $var
     * @return $this
     */
    public function setSchemaUpdate($var)
    {
        GPBUtil::checkMessage($var, \SchemaUpdateAction::class);
        $this->schema_update = $var;

        return $this;
    }

}

